/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define LSH LSHFT 
#define SPC SPACE

#define VMT C_MUTE
#define VDN C_VOL_DN
#define VUP C_VOL_UP

#define KPNL KP_NUM
#define KRET KP_ENTER
#define KMUL KP_MULTIPLY
#define KDIV KP_DIVIDE
#define KPLS KP_PLUS
#define KDOT KP_DOT
#define KCOM KP_COMMA
#define KN0 KP_N0



&mt {
    tapping-term-ms = <100>;
}; 

&sk {
    release-after-ms = <100>;
    quick-release;
}; 

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
    };
};


/ {
    behaviors {
        td_1t9: tap_dance_one_to_nine_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ONE_TO_NINE_LAYER";
            #binding-cells = <0>;
            tapping-term-ms = <280>;
            bindings = <&mo 1>, <&mo 9>;
        };

        ht_6: hold_tap_ht_6{
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAB_HT_6";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <600>;
            bindings = <&kp>, <&kp>;
        };
        minbar: mod_morph_minus_underbar {
            compatible = "zmk,behavior-mod-morph";
            label="MOD_MORPH_MINUS_UNDERBAR";
            #binding-cells = <0>;
            bindings = <&kp KP_MINUS>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT)>;
        };
        
    };
    
    conditional_layers {
        compatible = "zmk,conditional-layers";
        left_tri_layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };
        right_tri_layer {
            if-layers = <3 4>;
            then-layer = <6>;
        };
        left_right_one_tri_layer {
            if-layers = <1 3>;
            then-layer = <7>;
        };
        left_right_two_tri_layer {
            if-layers = <2 4>;
            then-layer = <8>;
        };
    };


    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |
*/
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&kp LSH   &kp COMMA &kp Z     &kp X     &kp C     &kp V         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &kp ESC
          &kp LGUI  &kp LALT  &kp SPACE &td_1t9   &mo 2         &mo 4     &mo 3     &kp RET   &kp LSH   &kp RALT
            >;
        };

        left_one_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  1   |  2   |  3   |  4   |  5   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  6   |  7   |  8   |  9   |  0   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |   
*/
            bindings = <
&kp GRAVE &kp N1    &kp N2    &kp N3    &kp N4    &kp N5         &kp F1    &kp F2    &kp F3    &kp F4    &kp F5    &kp F6
&trans    &kp N6    &kp N7    &kp N8    &kp N9    &kp KN0        &kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
&trans    &kp KDIV  &kp KMUL  &kp KPLS  &minbar   &kp KDOT       &kp VDN   &kp VUP   &kp VMT   &none     &none     &none
          &kp CAPS  &kp KPNL  &kp SPACE &trans    &trans         &trans    &trans    &kp KRET  &trans    &trans
            >;
        };


        left_two_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |    
*/
            bindings = <
&kp TAB   &kp P     &kp O     &kp I     &kp U     &kp Y         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp SQT   &kp A     &kp S     &kp D     &kp J     &kp H         &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&kp LSH   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &kp ESC
          &kp RALT  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &trans    &trans   &trans
            >;
        };
        
        right_one_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |  
*/
            bindings = <
&kp TAB   &kp ESC   &none     &none     &none     &none         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp LCTRL &kp LALT  &none     &none     &none     &none         &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&kp LSH   &kp DEL   &none     &none     &none     &none         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &kp ESC
          &mkp RCLK &mkp MCLK &mkp LCLK &trans    &trans        &trans    &trans    &trans    &trans    &trans
            >;
        };

        
        right_two_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |     
*/
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &BTC0  &BTC1  &BTC2  &BTC3  &BTC4    &BTAllClr
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none
&kp LSH   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B         &none     &none     &none     &none     &none     &none     
          &kp LGUI  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &none     &none     &none     
            >;
        };
        
        left_both_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |   
*/
            bindings = <
&kp TAB   &none     &none     &none     &none     &none         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp LCTRL &none     &kp ESC   &kp RET   &kp BSPC  &kp DEL       &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&kp LSH   &none     &none    &none     &none     &none         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &kp ESC
          &none    &none    &none     &trans    &trans        &trans    &trans    &kp RET   &kp LSH   &kp RALT
            >;
        };

        right_both_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |   
*/
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&kp LSH   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &kp ESC
          &kp LGUI  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &kp RET   &kp LSH   &kp RALT
            >;
        };

        left_right_one_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |     
*/
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&kp LSH   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &kp ESC
          &kp LGUI  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &kp RET   &kp LSH   &kp RALT
            >;
        };

        left_right_two_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |     
*/
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&kp LSH   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &kp ESC
          &kp LGUI  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &kp RET   &kp LSH   &kp RALT
            >;
        };

        left_one_double_layer {
/* --------------------------------------------------------------------------------
// |  TAB |  Q   |  W   |  E   |  R   |  T   |                     |  Y   |  U   |  I   |  O   |  P   | BKSP |
// | CTRL |  A   |  S   |  D   |  F   |  G   |                     |  H   |  J   |  K   |  L   |  ;   |  '   |
// | SHFT |  Z   |  X   |  C   |  V   |  B   |                     |  N   |  M   |  ,   |  .   |  /   | ESC  |
//               | GUI  | LWR  | GUI  | LWR  | SPC  |       | ENT  | RSE  | ALT  | LWR  | SPC  |     
*/
            bindings = <
&trans    &kp ESC   &kp HOME  &kp UP    &kp END   &mkp MCLK     &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
&trans    &kp BSPC  &kp LEFT  &kp DOWN  &kp RIGHT &mkp LCLK     &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
&trans    &kp DEL   &kp PG_UP &kp RET   &kp PG_DN &mkp RCLK     &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &kp ESC
          &trans    &trans    &trans    &trans    &trans        &trans    &trans    &kp RET   &kp LSH   &kp RALT
            >;
        };
    };

    macros {
        ZMK_MACRO(BTAllClr, wait-ms=<1>; tap-ms=<1>; bindings=<
            &bt BT_SEL 0  &bt BT_CLR &bt BT_SEL 1  &bt BT_CLR &bt BT_SEL 2  &bt BT_CLR 
            &bt BT_SEL 3  &bt BT_CLR &bt BT_SEL 4  &bt BT_CLR >;)
            
        ZMK_MACRO(BTC0, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 0  &bt BT_CLR >;)
        ZMK_MACRO(BTC1, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 1  &bt BT_CLR >;)
        ZMK_MACRO(BTC2, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 2  &bt BT_CLR >;)
        ZMK_MACRO(BTC3, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 3  &bt BT_CLR >;)
        ZMK_MACRO(BTC4, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 4  &bt BT_CLR >;)
        
    };
};
