/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define SH LSHFT 
#define SHFT LSHFT 
#define CT LCTRL 
#define CTRL LCTRL
#define RCT RCTRL 
#define AL LALT
#define ALT LALT
#define RAL RALT
#define GU LGUI
#define SPC SPACE
#define BPC BACKSPACE

#define VMT C_MUTE
#define VDN C_VOL_DN
#define VUP C_VOL_UP

#define KRET KP_ENTER
#define KMUL KP_MULTIPLY
#define KMIN KP_MINUS
#define KDIV KP_DIVIDE
#define KPLS KP_PLUS
#define KCOM KP_COMMA
#define KDOT KP_DOT

#define SM SEMI

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 0

#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 40
#define COMBO_PRIOR_IDLE 100

#define MOUSE_MOVE_NEG_DEFAULT -300
#define MOUSE_MOVE_DEFAULT 300
#define MOUSE_MOVE_NEG_FAST -3000 
#define MOUSE_MOVE_FAST 3000 

#define CL CAPS

#define VDN C_VOL_DN
#define VUP C_VOL_UP
#define CALC C_AL_CALC

#define MOVE_U MOVE_VERT(-200)
#define MOVE_D MOVE_VERT(200)
#define MOVE_L MOVE_HOR(-200)
#define MOVE_R MOVE_HOR(200)
#define MOVE_U9 MOVE_VERT(-900)
#define MOVE_D9 MOVE_VERT(900)
#define MOVE_L9 MOVE_HOR(-900)
#define MOVE_R9 MOVE_HOR(900)
#define SCL_U SCROLL_VERT(17)
#define SCL_D SCROLL_VERT(-17)
#define SCL_L SCROLL_HOR(-17)
#define SCL_R SCROLL_HOR(17)
#define SCL_U12 SCROLL_VERT(18)
#define SCL_D12 SCROLL_VERT(-18)
#define SCL_L12 SCROLL_HOR(-18)
#define SCL_R12 SCROLL_HOR(18)


&mt {
    tapping-term-ms = <100>;
}; 
&sk {
    release-after-ms = <5000>;
    quick-release;
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
    };
};


/ {
    behaviors {
        hd: hold_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_MOD";
            #binding-cells = <2>;
            
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            bindings = <&mo>, <&kp>;
        };


        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAB_HOME_ROW";
            #binding-cells = <2>;
            
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            bindings = <&kp>, <&kp>;
        };
        sht: sticky-hold-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_STICKY";
            #binding-cells = <2>;
            
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            bindings = <&sk>, <&kp>;
        };

        minbar: mod_morph_minus_underbar {
            compatible = "zmk,behavior-mod-morph";
            label="MOD_MORPH_MINUS_UNDERBAR";
            #binding-cells = <0>;
            bindings = <&kp KP_MINUS>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT)>;
        };
        plseql: mod_morph_plus_equal {
            compatible = "zmk,behavior-mod-morph";
            label="MOD_MORPH_PLUS_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp EQUAL>;
            mods = <(MOD_LSFT)>;
        };

        
        td_cpnm: tap_dance_caps_kpnum{
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CAPS_KPNUM";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp CAPS>,  <&kp KP_NUM>;
        };
        
        mm_mvu: mod_morph_mvu{
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_MVU";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_VERT(MOUSE_MOVE_NEG_DEFAULT)>,  <&mmv MOVE_VERT(MOUSE_MOVE_NEG_FAST)>;
            mods = <(MOD_LALT)>;
        };
        mm_mvd: mod_morph_mvd{
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_MVD";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_VERT(MOUSE_MOVE_DEFAULT)>,  <&mmv MOVE_VERT(MOUSE_MOVE_FAST)>;
            mods = <(MOD_LALT)>;
        };
        mm_mvl: mod_morph_mvl{
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_MVL";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_HOR(MOUSE_MOVE_NEG_DEFAULT)>,  <&mmv MOVE_HOR(MOUSE_MOVE_NEG_FAST)>;
            mods = <(MOD_LALT)>;
        };
        mm_mvr: mod_morph_mvr{
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_MVR";
            #binding-cells = <0>;
            bindings = <&mmv MOVE_HOR(MOUSE_MOVE_DEFAULT)>,  <&mmv MOVE_HOR(MOUSE_MOVE_FAST)>;
            mods = <(MOD_LALT)>;
        };
        mm_mhu: mod_morph_mhu{
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_MHU";
            #binding-cells = <0>;
            bindings = <&mwh SCL_U>,  <&mwh SCL_U12>;
            mods = <(MOD_LALT)>;
        };
        mm_mhd: mod_morph_mhd{
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_MHD";
            #binding-cells = <0>;
            bindings = <&mwh SCL_D>,  <&mwh SCL_D12>;
            mods = <(MOD_LALT)>;
        };
        mm_mhl: mod_morph_mhl{
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_MHL";
            #binding-cells = <0>;
            bindings = <&mwh SCL_L>,  <&mwh SCL_L12>;
            mods = <(MOD_LALT)>;
        };
        mm_mhr: mod_morph_mhr{
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_MHR";
            #binding-cells = <0>;
            bindings = <&mwh SCL_R>,  <&mwh SCL_R12>;
            mods = <(MOD_LALT)>;
        };
    };
    
    conditional_layers {
        compatible = "zmk,conditional-layers";
        left_tri_layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };
        right_tri_layer {
            if-layers = <3 4>;
            then-layer = <6>;
        };
    };

    macros {
        ZMK_MACRO(BTAllClr, wait-ms=<1>; tap-ms=<1>; bindings=<
            &bt BT_SEL 0  &bt BT_CLR &bt BT_SEL 1  &bt BT_CLR &bt BT_SEL 2  &bt BT_CLR 
            &bt BT_SEL 3  &bt BT_CLR &bt BT_SEL 4  &bt BT_CLR >;)
            
        ZMK_MACRO(BTC0, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 0  &bt BT_CLR >;)
        ZMK_MACRO(BTC1, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 1  &bt BT_CLR >;)
        ZMK_MACRO(BTC2, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 2  &bt BT_CLR >;)
        ZMK_MACRO(BTC3, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 3  &bt BT_CLR >;)
        ZMK_MACRO(BTC4, wait-ms=<1>; tap-ms=<1>; bindings=< &bt BT_SEL 4  &bt BT_CLR >;)
        

        ZMK_MACRO(CAPT ,wait-ms=<30>; tap-ms=<30>; bindings= 
            <&macro_press &kp LSHFT>, <&macro_press &kp LGUI>
            , <&macro_tap &kp S>
            , <&macro_release &kp LSHFT>, <&macro_release &kp LGUI>;)
    };

     combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <2 3>;
            layers = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_del {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <3 4>;
            layers = <0 1>;
            bindings = <&kp DEL>;
        };
        combo_enter {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <14 15>;
            layers = <0 1>;
            bindings = <&kp RET>;
        };
        combo_bspc {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <15 16>;
            layers = <0 1>;
            bindings = <&kp BSPC>;
        };
        
        combo_mul {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <13 14>;
            layers = <1>;
            bindings = <&kp KP_MULTIPLY>;
        };
        combo_div {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <1 2>;
            layers = <1>;
            bindings = <&kp KP_DIVIDE>;
        };
    };
    


    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &kp Y     &kp U     &kp I     &kp O     &kp P     &none
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &kp H     &kp J     &kp K     &kp L     &kp SM    &kp SQT
&kp SHFT  &kp COMMA &kp Z     &kp X     &kp C     &kp V         &kp B     &kp N     &kp M     &kp DOT   &kp FSLH  &kp BSLH
          &kp LGUI  &kp LALT  &kp SPC   &hd 1 BPC &hd 2 RET     &hd 4 ESC &hd 3 RET &kp SHFT  &kp RALT  &none
            >;
        };

        left_lwr_layer { //1
            bindings = <
&kp GRAVE &minbar   &kp N7    &kp N8    &kp N9    &kp EQUAL     &kp LPAR  &kp RPAR  &kp LT    &kp GT    &kp P     &kp BPC
&trans    &plseql   &kp N4    &kp N5    &kp N6    &kp KDOT      &kp LBRC  &kp RBRC  &kp K     &kp L     &kp SEMI  &kp SQT
&trans    &kp COMMA &kp N1    &kp N2    &kp N3    &kp KP_N0     &kp LBKT  &kp RBKT  &kp M     &trans    &kp FSLH  &kp BSLH
          &trans    &trans    &trans    &trans    &trans        &trans    &trans    &trans    &kp RCTRL &trans
            >;
        };
        
        left_rse_layer { //2
            bindings = <
&td_cpnm  &kp PG_UP &kp HOME  &kp UP    &kp END   &mm_mhu      &trans    &kp F7    &kp F8    &kp F9    &kp F12   &trans
&kp LGUI  &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT &mm_mhd      &trans    &kp F4    &kp F5    &kp F6    &kp F11   &trans
&trans    &trans    &kp DEL   &mkp LCLK &mkp MCLK &mkp RCLK    &trans    &kp F1    &kp F2    &kp F3    &kp F10   &trans
          &CAPT     &trans    &trans    &trans    &trans       &trans    &trans    &trans    &trans    &trans
            >;
        };

        left_sub_layer { //3
            bindings = <
&kp GRAVE &minbar   &kp N7    &kp N8    &kp N9    &kp EQUAL     &kp LPAR  &kp RPAR  &kp LT    &kp GT    &kp P     &kp BPC
&trans    &plseql   &kp N4    &kp N5    &kp N6    &kp KDOT      &kp LBRC  &kp RBRC  &kp K     &kp L     &kp SEMI  &kp SQT
&trans    &kp COMMA &kp N1    &kp N2    &kp N3    &kp KP_N0     &kp LBKT  &kp RBKT  &kp M     &trans    &kp FSLH  &kp BSLH
          &trans    &trans    &trans    &trans    &trans        &trans    &trans    &trans    &kp RCTRL &trans
            >;
        };
        
        right_lwr_layer { //4
            bindings = <
   &trans    &mmv MOVE_U9 &mm_mhu   &mm_mvu      &mm_mhd   &mmv MOVE_D9      &kp F7    &kp F8    &kp F9    &kp F12   &kp P     &kp EQUAL
   &trans    &mmv MOVE_L9 &mm_mvl   &mm_mvd      &mm_mvr   &mmv MOVE_R9      &kp F4    &kp F5    &kp F6    &kp F11   &kp SEMI  &kp SQT
   &trans    &trans       &mm_mhl   &mmv MOVE_D9 &mm_mhr   &none             &kp F1    &kp F2    &kp F3    &kp F10   &kp FSLH  &kp RCTRL
             &trans       &mkp LCLK &mkp LCLK    &mkp RCLK &mkp MCLK         &trans    &trans    &trans    &trans    &trans
            >;
        };

        
        right_rse_layer { //5
            bindings = <
                
&trans     &kp P     &kp O     &kp I     &kp U     &kp Y      &kp T      &kp R      &kp E      &kp W     &kp Q     &kp TAB
&kp SQT    &kp SEMI  &kp L     &kp K     &kp J     &kp H      &kp G      &kp F      &kp D      &kp S     &kp A     &kp LCTRL
&kp BSLH   &kp FSLH  &kp DOT   &kp M     &kp N     &kp B      &kp V      &kp C      &kp X      &kp Z     &kp COMMA &kp LALT   
           &kp RALT  &trans    &trans    &trans    &trans     &trans     &kp RET   &kp SPACE   &sk RSHFT &kp LGUI
            >;
        };
        
        left_both_layer {//6 - mirror layer
            bindings = <
&kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T         &BTC0  &BTC1  &BTC2  &BTC3  &BTC4    &BTAllClr
&kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G         &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none
&trans    &kp FSLH  &kp DOT   &kp M     &kp N     &kp B         &none     &none     &none     &none     &out OUT_BLE     &out OUT_USB     
          &kp LGUI  &kp LALT  &kp SPACE &trans    &trans        &trans    &trans    &none     &none     &none     
            >;
        };

    };
};
